environments:
  DEV:
    createdAt:
      nanoseconds: 841000000
      seconds: 1660211145
    createdBy: AzV1VxpweTy5VXHJkvlL
    description: Development
    devEnv: true
    id: 1
    mappings:
      "1":
        database: CITY_BIKE_DWH
        id: 1
        locationName: DEMO_COALESCE
        schema: CITY_BIKE_RAW
      "5":
        database: WEATHER
        id: 5
        locationName: WEATHER_NY
        schema: PUBLIC
    name: DEV
jobs: {}
locations:
  DEMO_COALESCE:
    default: true
    id: 1
    locationName: DEMO_COALESCE
  WEATHER_NY:
    default: false
    id: 5
    locationName: WEATHER_NY
macros: {}
packages: {}
projects: {}
stepTypes:
  StepType-1:
    id: "1"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: New Type
        short: NEW
        tagColor: gray
        plural: New Types
      templates:
        create:
          templateString: ""
        run:
          templateString: ""
    name: Raw
    version: 1
  StepType-2:
    id: "2"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2
            
                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Stage
    version: 1
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub User-Defined
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            options: 
            - table
            default: table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - type: multisourceToggle

          - displayName: Where-SQL
            attributeName: WhereSql
            type: textBox
            isRequired: false  
          
        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE_H"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "SYSTEM_SOURCE_H"
          transform: "RAW_*.RAW_SYSTEM_SOURCE"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemSource
      templates:
        create:
          templateString: "  {{ stage('Create Hub Table') }}\r

            \r

            CREATE OR REPLACE TABLE {{
            ref_no_link(node.location.name, node.name) }}\r

            (\r

            \t{% for col in columns %}\r

            \t\t\"{{ col.name }}\" {{ col.dataType }}\r

            \t\t{%- if not col.nullable %} NOT NULL\r

            \t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{
            col.defaultValue }}{% endif %}\r

            \t\t{% endif %}\r

            \t\t{%- if col.description | length > 0 %} COMMENT '{{
            col.description }}'{% endif %}\r

            \t\t{%- if not loop.last -%}, {% endif %}\r

            \t{% endfor %}\r

            )\r

            {%- if node.description | length > 0 %} COMMENT = '{{
            node.description }}'{% endif %}\r\n"
        run:
          templateString: "\r

            {% if config.preSQL %}\r

            \t{{ stage('Pre-SQL') }}\r

            \t{{ config.preSQL }}\r

            {% endif %}\r

            \r

            {% for source in sources %}\r

            \r

            \t{{ stage('Merge Hub - ' ~ source.name) }}\r

            \tMERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING\r

            \t(\r

            \t\tSELECT DISTINCT\r

            \t\t{% for col in source.columns %}\r

            \t\t\t{{ get_source_transform(col) }} AS \"{{ col.name
            }}\"\r

            \t\t\t{%- if not loop.last -%}, {% endif %}\r

            \t\t{% endfor %}\r

            \r

            \t\t{{ source.join }}\r

            \t\tWHERE\t\t{% if config.WhereSql|length %} \r

            \t\t\t\t\t{{ config.WhereSql }}\r

            \t\t\t\t\t{% else %}\r

            \t\t\t\t\t 1=1 \r

            \t\t\t\t\t{% endif %} \r

            \t\tand RAW_LOAD_DATE = (SELECT MAX(RAW_LOAD_DATE) {{
            source.join }})\r

            \t\t{% if not loop.last %}\r

            \t\t\t{{ config.insertStrategy }}\r

            \t\t{% endif %}\r

            \t)\r

            \tAS \"SRC\"\r

            \tON\r

            \t{% for col in sources[0].columns if (col.isHubHash)
            -%}\r

            \t\t{% if not loop.first %}\r

            \t\t\tAND\r

            \t\t{% endif %}\r

            \t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name
            }}\"\r

            \t{% endfor %}\r

            \tWHEN NOT MATCHED THEN\r

            \tINSERT\r

            \t(\r

            \t\t{% for col in columns %}\r

            \t\t\t\"{{ col.name }}\"\r

            \t\t\t{%- if not loop.last -%}, {% endif %}\r

            \t\t{% endfor %}\r

            \t) VALUES\r

            \t(\r

            \t\t{% for col in columns %}\r

            \t\t\t\"SRC\".\"{{ col.name }}\"\r

            \t\t\t{%- if not loop.last -%}, {% endif %}\r

            \t\t{% endfor %}\r

            \t)\r

            \r

            {% endfor %}\r

            \r

            {% if config.postSQL %}\r

            \t{{ stage('Post-SQL') }}\r

            \t{{ config.postSQL }}\r

            {% endif %}"
    name: Hub
    version: 1
  StepType-5:
    id: "5"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: BV View
        short: S_CURR
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
        - groupName: Options
          items:
          - displayName: Sat Hash Column(s) (Include Multi-Active)
            type: columnSelector
            attributeName: isSatKey
            isRequired: true

          - displayName: Sat Date Column(s)
            type: columnSelector
            attributeName: isDateColumn
            isRequired: true

          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true   
            enableIf: "false" 
      templates:
        create:
          templateString: ""
        run:
          templateString: "{{ stage('Create View') }}\r

            \r

            {% set order_by = namespace(order_by_txt='') %}\r

            {% set partition_by = namespace(partition_by_txt='')
            %}\r

            \r

            \r

            CREATE OR REPLACE VIEW {{
            ref_no_link(node.location.name, node.name) }}\r

            (\r

            \    {% for col in columns %}\r

            \        \"{{ col.name }}\"\r

            \        {%- if not loop.last -%}, {% endif %}\r

            \        {%- if col.description | length > 0 %} COMMENT
            '{{ col.description }}'{% endif %}\r

            \        \r

            \                {%- if col.isDateColumn  %} \r

            \            {%- if order_by.order_by_text  | length >=
            1 %}{% set order_by.order_by_text = order_by.order_by_text + ',' +
            col.name %}{% endif %} \r

            \            {%- if order_by.order_by_text  | length ==
            0 %}{% set order_by.order_by_text = col.name %}{% endif %}\r

            \    {% endif %} \r

            \r

            \    {%- if col.isSatKey  %} \r

            \            {%- if partition_by.partition_by_text  |
            length >= 1 %}{% set partition_by.partition_by_text =
            partition_by.partition_by_text + ',' + col.name %}{% endif %} \r

            \            {%- if partition_by.partition_by_text  |
            length == 0 %}{% set partition_by.partition_by_text = col.name %}{%
            endif %}\r

            \    {% endif %}  \r

            \r

            \r

            \    {% endfor %}\r

            )\r

            {%- if node.description | length > 0 %} COMMENT = '{{
            node.description }}'{% endif %}\r

            AS\r

            {% for source in sources %}\r

            \    SELECT {% if config.selectDistinct %} DISTINCT {%
            endif %}\r

            \    {% for col in source.columns %}\r

            \        {{ get_source_transform(col) }} AS \"{{
            col.name }}\"\r

            \        {%- if not loop.last -%}, {% endif %}\r

            \    {% endfor %}\r

            \    \r

            \    {{ source.join }}\r

            \    QUALIFY LEAD({{order_by.order_by_text}}) \r

            \            OVER (PARTITION BY
            {{partition_by.partition_by_text}} \r

            \                ORDER BY {{order_by.order_by_text}}
            ASC) IS NULL\r

            \r

            \r

            {% endfor %}\r\n"
    name: BV View
    version: 1
  StepType-6:
    id: "6"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Link User-Defined
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

          - displayName: Where-SQL
            attributeName: WhereSql
            type: textBox
            isRequired: false     

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "SYSTEM_SOURCE_L"
          transform: "RAW_*.RAW_SYSTEM_SOURCE"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemSource
      templates:
        create:
          templateString: "  {{ stage('Create Link Table') }}\r

            \r

            CREATE OR REPLACE TABLE {{
            ref_no_link(node.location.name, node.name) }}\r

            (\r

            \    {% for col in columns %}\r

            \        \"{{ col.name }}\" {{ col.dataType }}\r

            \        {%- if not col.nullable %} NOT NULL\r

            \            {%- if col.defaultValue | length > 0 %}
            DEFAULT {{ col.defaultValue }}{% endif %}\r

            \        {% endif %}\r

            \        {%- if col.description | length > 0 %} COMMENT
            '{{ col.description }}'{% endif %}\r

            \        {%- if not loop.last -%}, {% endif %}\r

            \    {% endfor %}\r

            )\r

            {%- if node.description | length > 0 %} COMMENT = '{{
            node.description }}'{% endif %}\r\n"
        run:
          templateString: "{% if config.preSQL %}\r

            \    {{ stage('Pre-SQL') }}\r

            \    {{ config.preSQL }}\r

            \r

            {% endif %}\r

            \r

            {% for source in sources %}\r

            \            \r

            \    {{ stage('Merge Link - ' ~ source.name) }}\r

            \    MERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING\r

            \    (\r

            \        SELECT DISTINCT\r

            \        {% for col in source.columns %}\r

            \            {{ get_source_transform(col) }} AS \"{{
            col.name }}\"\r

            \            {%- if not loop.last -%}, {% endif %}\r

            \        {% endfor %}\r

            \r

            \        {{ source.join }}\r

            \r

            \t\tWHERE\t\t{% if config.WhereSql|length %} \r

            \t\t\t\t\t{{ config.WhereSql }}\r

            \t\t\t\t\t{% else %}\r

            \t\t\t\t\t 1=1 \r

            \t\t\t\t\t{% endif %} \r

            \t\tand RAW_LOAD_DATE = (SELECT MAX(RAW_LOAD_DATE) {{
            source.join }})        \r

            \r

            \        {% if not loop.last %}\r

            \            {{ config.insertStrategy }}\r

            \        {% endif %}\r

            \    )\r

            \    AS \"SRC\"\r

            \    ON\r

            \    {% for col in sources[0].columns if
            (col.isLinkHash) -%}\r

            \        {% if not loop.first %}\r

            \            AND\r

            \        {% endif %}\r

            \        \"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{
            col.name }}\"\r

            \    {% endfor %}\r

            \    WHEN NOT MATCHED THEN\r

            \    INSERT\r

            \    (\r

            \        {% for col in columns %}\r

            \            \"{{ col.name }}\"\r

            \            {%- if not loop.last -%}, {% endif %}\r

            \        {% endfor %}\r

            \    ) VALUES\r

            \    (\r

            \        {% for col in columns %}\r

            \            \"SRC\".\"{{ col.name }}\"\r

            \            {%- if not loop.last -%}, {% endif %}\r

            \        {% endfor %}\r

            \    )\r

            \r

            {% endfor %}\r

            \r

            {% if config.postSQL %}\r

            \    {{ stage('Post-SQL') }}\r

            \    {{ config.postSQL }}    \r

            {% endif %}"
    name: Link
    version: 1
  StepType-7:
    id: "7"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Raw Table
        short: RAW
        plural: RAW
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
            
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false
                  
          - displayName: Lake_Folder
            attributeName: lakeFolder
            type: textBox
            isRequired: false    

        systemColumns:
        - displayName: "RAW_DATA"
          transform: t.$1
          dataType: VARIANT
          placement: begin
          attributeName: isVariant

        - displayName: "RAW_FILE_ROW_NUMBER"
          transform: metadata$file_row_number
          dataType: NUMBER
          placement: begin
          attributeName: isROW_NUMBER

        - displayName: "RAW_LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RAW_RECORD_SOURCE"
          transform: METADATA$FILENAME
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource

        - displayName: "RAW_SYSTEM_SOURCE"
          transform: UPPER(split_part(RAW_RECORD_SOURCE,'/',0))||split_part(RAW_RECORD_SOURCE,'/',3)
          dataType: VARCHAR
          placement: end
          attributeName: isSystemSource
      templates:
        create:
          templateString: "{% if node.override.create.enabled %}\r

            \t\r

            \t{{ node.override.create.script }}\r

            \r

            {% elif node.materializationType == 'table' %}\r

            \t{{ stage('Create Stage Table') }}\r

            \r

            \tCREATE OR REPLACE TABLE {{
            ref_no_link(node.location.name, node.name) }}\r

            \t(\r

            \t\t{% for col in columns %}\r

            \t\t\t\"{{ col.name }}\" {{ col.dataType }}\r

            \t\t\t{%- if not col.nullable %} NOT NULL\r

            \t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT
            {{ col.defaultValue }}{% endif %}\r

            \t\t\t{% endif %}\r

            \t\t\t{%- if col.description | length > 0 %} COMMENT '{{
            col.description }}'{% endif %}\r

            \t\t\t{%- if not loop.last -%}, {% endif %}\r

            \t\t{% endfor %}\r

            \t)\r

            \t{%- if node.description | length > 0 %} COMMENT = '{{
            node.description }}'{% endif %}\r

            \r

            \r

            {% endif %}\r\n"
        run:
          templateString: "{{ stage('Use Database') }}\r

            Use database dataplatform_{{parameters.env}}\r

            \r

            {% if node.materializationType == 'table' %}\r

            \r

            \r

            \t\t{% if config.truncateBefore %}\r

            \t\r

            \t\t\t{{ stage('Truncate Stage Table') }}\r

            \t\t\tTRUNCATE IF EXISTS {{
            ref_no_link(node.location.name, node.name) }}\r

            \t\r

            \t\t{% endif %}\r

            \t\r

            \t\r

            \r

            \t\r

            \t\t{% for source in sources %}\r

            \t\r

            \t\t\t\r

            \t\t\t\t{{ stage('Insert ' + source.name | string ) }}\r

            \t\t\t\t\r

            \t\t\t\tCOPY INTO {{ ref_no_link(node.location.name,
            node.name) }}\r

            \t\t\t\t(\r

            \t\t\t\t\t{% for col in source.columns %}\r

            \t\t\t\t\t\t\"{{ col.name }}\"\r

            \t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\r

            \t\t\t\t\t{% endfor %}\r

            \t\t\t\t) FROM\r

            \t\t\t\r

            \t\t\t(\r

            \t\t\tSELECT\r

            \t\t\t{% for col in source.columns %}\r

            \                {{ get_source_transform(col) }} AS \"{{
            col.name }}\"\r

            \t\t\t\t{%- if not loop.last -%}, {% endif %}\r

            \t\t\t{% endfor %}\r

            \t\r

            \t\t\tFROM {{parameters.ext_stage}}/{{ config.lakeFolder
            }} t)\r

            \t\r

            \t\r

            \t\t{% endfor %}\r

            \t\r

            {% endif %}\r\n"
    name: Raw Table
    version: 1
  StepType-8:
    id: "8"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: New Type
        short: NEW
        tagColor: gray
        plural: New Types
      templates:
        create:
          templateString: ""
        run:
          templateString: ""
    name: New Type
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |
            
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: "

            \    {% if node.materializationType == 'table' %}

            \        {{ stage('Create Fact Table') }}

            \   \ 

            \        CREATE OR REPLACE TABLE {{
            ref_no_link(node.location.name, node.name) }}

            \        (

            \            {% for col in columns %}

            \                \"{{ col.name }}\" {{ col.dataType }}

            \                {%- if not col.nullable %} NOT NULL

            \                    {%- if col.defaultValue | length >
            0 %} DEFAULT {{ col.defaultValue }}{% endif %}

            \                {% endif %}

            \                {%- if col.description | length > 0 %}
            COMMENT '{{ col.description }}'{% endif %}

            \                {%- if not loop.last -%}, {% endif %}

            \            {% endfor %}

            \        )

            \        {%- if node.description | length > 0 %} COMMENT
            = '{{ node.description }}'{% endif %}

            \   \ 

            \   \ 

            \    {% elif node.materializationType == 'view' %}

            \        {{ stage('Create Fact View') }}

            \   \ 

            \        CREATE OR REPLACE VIEW {{
            ref_no_link(node.location.name, node.name) }}

            \        (

            \            {% for col in columns %}

            \                \"{{ col.name }}\"

            \                {%- if col.description | length > 0 %}
            COMMENT '{{ col.description }}'{% endif %}

            \                {%- if not loop.last -%},{% endif %}

            \            {% endfor %}

            \        )

            \        {%- if node.description | length > 0 %} COMMENT
            = '{{ node.description }}'{% endif %}

            \        AS

            \        {% for source in sources %}

            \   \ 

            \            {% if loop.first %}SELECT {% endif %}

            \   \ 

            \            {% for col in source.columns %}

            \                {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \                {%- if not loop.last -%}, {% endif %}

            \            {% endfor %}

            \            {{ source.join }}

            \   \ 

            \            {% if not loop.last %} UNION ALL {% endif
            %}

            \        {% endfor %}

            \   \ 

            \    {% endif %}

            \    "
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            \    {% if node.materializationType == 'table' %}

            \        {% if config.preSQL %}

            \            {{ stage('Pre-SQL') }}

            \            {{ config.preSQL }}

            \        {% endif %}

            \       \ 

            \        {% set has_business_key = columns |
            selectattr(\"isBusinessKey\") | list | length > 0 %}

            \       \ 

            \        {% for source in sources %}

            \       \ 

            \            {% if has_business_key %}

            \       \ 

            \                {{ stage('MERGE ' + source.name |
            string ) }}

            \                MERGE INTO {{
            ref_no_link(node.location.name, node.name) }} \"TGT\"

            \                USING (

            \                    SELECT

            \                    {% for col in source.columns %}

            \                        {{ get_source_transform(col) }}
            AS \"{{ col.name }}\"

            \                        {%- if not loop.last %}, {%
            endif %}

            \                    {% endfor %}

            \                    {{ source.join }})

            \                    AS \"SRC\"

            \                ON

            \                {% for col in source.columns if
            col.isBusinessKey -%}

            \                    {% if not loop.first %}

            \                        AND

            \                    {% endif %}

            \                    \"SRC\".\"{{ col.name }}\" =
            \"TGT\".\"{{ col.name }}\"

            \                {% endfor %}

            \                WHEN MATCHED

            \                {% for col in source.columns if not
            (   col.isBusinessKey or

            \                                                        \
            col.isSystemUpdateDate or

            \                                                        \
            col.isSystemCreateDate) %}

            \                    {% if loop.first %}

            \                        AND (

            \                    {% else %}

            \                        OR

            \                    {% endif %}

            \                    NVL( CAST(\"SRC\".\"{{ col.name
            }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\"
            as STRING), '**NULL**')

            \                    {% if loop.last %}

            \                        )

            \                    {% endif %}

            \                {% endfor %}

            \                THEN UPDATE SET

            \                {%- for col in source.columns if not
            (col.isBusinessKey or col.isSystemCreateDate) %}

            \                        \"TGT\".\"{{ col.name }}\" =
            \"SRC\".\"{{ col.name }}\"

            \                    {% if not loop.last %}, {% endif %}

            \                {% endfor %}

            \                WHEN NOT MATCHED THEN

            \                INSERT (

            \                {%- for col in source.columns if not
            col.isSurrogateKey %}

            \                    \"{{ col.name }}\"

            \                    {% if not loop.last %}, {% endif %}

            \                {% endfor -%}

            \                )

            \                VALUES (

            \                {%- for col in source.columns if not
            col.isSurrogateKey %}

            \                    \"SRC\".\"{{ col.name }}\"

            \                    {% if not loop.last %}, {% endif %}

            \                {% endfor -%}

            \                )

            \       \ 

            \            {% else %}

            \       \ 

            \                {{ stage('Insert ' + source.name |
            string ) }}

            \       \ 

            \                    INSERT INTO {{
            ref_no_link(node.location.name, node.name) }}

            \                    (

            \                        {% for col in source.columns %}

            \                            \"{{ col.name }}\"

            \                            {%- if not loop.last -%},{%
            endif %}

            \                        {% endfor %}

            \                    )

            \       \ 

            \                    SELECT

            \                    {% for col in source.columns %}

            \                        {{ get_source_transform(col) }}
            AS \"{{ col.name }}\"

            \                        {%- if not loop.last -%}, {%
            endif %}

            \                    {% endfor %}

            \                    {{ source.join }}

            \            {% endif %}

            \        {% endfor %}

            \        {% if config.postSQL %}

            \            {{ stage('Post-SQL') }}

            \            {{ config.postSQL }}

            \        {% endif %}

            \    {% endif %}


            \    {% if config.testsEnabled %}

            \        {% for test in node.tests %}

            \            {% if test.runOrder == 'After' %}

            \                {{ test_stage(test.name,
            test.continueOnFailure) }}

            \                {{ test.templateString }}

            \            {% endif %}

            \        {% endfor %}


            \        {% for column in columns %}

            \            {% for test in column.tests %}

            \                {{ test_stage(column.name + \": \" +
            test.name) }}

            \                {{ test.templateString }}

            \            {% endfor %}

            \        {% endfor %}

            \    {% endif %}

            \   \ 

            \    "
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            {% if node.materializationType == 'table' %}

            \t{% if config.preSQL %}

            \t\t{{ stage('Pre-SQL') }}

            \t\t{{ config.preSQL }}

            \t{% endif %}



            \t{{ stage('Merge Hub') }}

            \tMERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING

            \t(

            \t\t{% for source in sources %}

            \t\tSELECT

            \t\t{% for col in source.columns %}

            \            {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}


            \t\t{{ source.join }}


            \t\t{% if not loop.last %}

            \t\t\t{{ config.insertStrategy }}

            \t\t{% endif %}

            \t{% endfor %}

            \t)

            \tAS \"SRC\"

            \tON

            \t{% for col in sources[0].columns if
            (col.sourceColumns[0]\ 

            \                                        and
            col.sourceColumns[0].column\ 

            \                                        and
            col.sourceColumns[0].column.isHubHash

            \                                        ) -%}

            \t\t{% if not loop.first %}

            \t\t\tAND

            \t\t{% endif %}

            \t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name
            }}\"

            \t{% endfor %}

            \tWHEN NOT MATCHED THEN

            \tINSERT

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t) VALUES

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"SRC\".\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t)



            \t{% if config.postSQL %}

            \t\t{{ stage('Post-SQL') }}

            \t\t{{ config.postSQL }}

            \t{% endif %}

            \t

            {% endif %}


            {% if config.testsEnabled %}

            \t{% for test in node.tests %}

            \t\t{% if test.runOrder == 'After' %}

            \t\t\t{{ test_stage(test.name, test.continueOnFailure)
            }}

            \t\t\t{{ test.templateString }}

            \        {% endif %}

            \t{% endfor %}


            \t{% for column in columns %}

            \t\t{% for test in column.tests %}

            \t\t\t{{ test_stage(column.name + \": \" + test.name) }}

            \t\t\t{{ test.templateString }}

            \t\t{% endfor %}

            \t{% endfor %}

            {% endif %}

            \t\t\t"
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            {% if node.materializationType == 'table' %}

            \t{% if config.preSQL %}

            \t\t{{ stage('Pre-SQL') }}

            \t\t{{ config.preSQL }}

            \t

            \t{% endif %}


            \t\t\t

            \t{{ stage('Merge Link') }}

            \tMERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING

            \t(

            \t\t{% for source in sources %}

            \t\tSELECT

            \t\t{% for col in source.columns %}

            \            {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}


            \t\t{{ source.join }}


            \t\t{% if not loop.last %}

            \t\t\t{{ config.insertStrategy }}

            \t\t{% endif %}

            \t{% endfor %}

            \t)

            \tAS \"SRC\"

            \tON

            \t{% for col in sources[0].columns if
            (col.sourceColumns[0]\ 

            \                                        and
            col.sourceColumns[0].column\ 

            \                                        and
            col.sourceColumns[0].column.isLinkHash

            \                                        ) -%}

            \t\t{% if not loop.first %}

            \t\t\tAND

            \t\t{% endif %}

            \t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name
            }}\"

            \t{% endfor %}

            \tWHEN NOT MATCHED THEN

            \tINSERT

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t) VALUES

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"SRC\".\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t)


            \t{% if config.postSQL %}

            \t\t{{ stage('Post-SQL') }}

            \t\t{{ config.postSQL }}\t

            \t{% endif %}

            {% endif %}


            {% if config.testsEnabled %}

            \t{% for test in node.tests %}

            \t\t{% if test.runOrder == 'After' %}

            \t\t\t{{ test_stage(test.name, test.continueOnFailure)
            }}

            \t\t\t{{ test.templateString }}

            \        {% endif %}

            \t{% endfor %}


            \t{% for column in columns %}

            \t\t{% for test in column.tests %}

            \t\t\t{{ test_stage(column.name + \": \" + test.name) }}

            \t\t\t{{ test.templateString }}

            \t\t{% endfor %}

            \t{% endfor %}

            {% endif %}

            \t\t\t"
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            {% if node.materializationType == 'table' %}

            \t\t{% if config.preSQL %}

            \t\t\t{{ stage('Pre-SQL') }}

            \t\t\t{{ config.preSQL }}

            \t\t{% endif %}

            \t

            \t\t{{ stage('Merge Satellite') }}

            \t\tMERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING

            \t\t(

            \t\t\t{% for source in sources %}

            \t\t\tSELECT

            \t\t\t{% for col in source.columns %}

            \                {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \t\t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t\t{% endfor %}

            \t

            \t\t\t{{ source.join }}

            \t

            \t\t\t{% if not loop.last %}

            \t\t\t\t{{ config.insertStrategy }}

            \t\t\t{% endif %}

            \t\t{% endfor %}

            \t\t)

            \t\tAS \"SRC\"

            \t\tON

            \t\t{% for col in sources[0].columns if
            (col.sourceColumns[0]\ 

            \                                            and
            col.sourceColumns[0].column\ 

            \                                            and
            col.sourceColumns[0].column.isChangeHash

            \                                            ) -%}

            \t\t\t{% if not loop.first %}

            \t\t\t\tAND

            \t\t\t{% endif %}

            \t\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name
            }}\"

            \t\t{% endfor %}

            \t\tWHEN NOT MATCHED THEN

            \t\tINSERT

            \t\t(

            \t\t\t{% for col in columns %}

            \t\t\t\t\"{{ col.name }}\"

            \t\t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t\t{% endfor %}

            \t\t) VALUES

            \t\t(

            \t\t\t{% for col in columns %}

            \t\t\t\t\"SRC\".\"{{ col.name }}\"

            \t\t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t\t{% endfor %}

            \t\t)

            \t

            \t{% if config.postSQL %}

            \t\t{{ stage('Post-SQL') }}

            \t\t{{ config.postSQL }}\t

            \t{% endif %}

            \t

            {% endif %}


            {% if config.testsEnabled %}

            \t{% for test in node.tests %}

            \t\t{% if test.runOrder == 'After' %}

            \t\t\t{{ test_stage(test.name, test.continueOnFailure)
            }}

            \t\t\t{{ test.templateString }}

            \        {% endif %}

            \t{% endfor %}


            \t{% for column in columns %}

            \t\t{% for test in column.tests %}

            \t\t\t{{ test_stage(column.name + \": \" + test.name) }}

            \t\t\t{{ test.templateString }}

            \t\t{% endfor %}

            \t{% endfor %}

            {% endif %}

            \t\t\t"
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2
            
                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-1:
    id: 1
    name: Source Nodes
    steps:
      - "18"
      - "18"
      - "18"
      - "19"
  Subgraph-2:
    id: 2
    name: Hub Nodes
    steps: []
